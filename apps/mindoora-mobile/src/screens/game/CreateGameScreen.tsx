import React, { useState, useRef } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  Image,
  SafeAreaView,
  TextInput,
  Alert,
  ScrollView,
  ActivityIndicator,
} from 'react-native';
import { StatusBar } from 'expo-status-bar';
import aiService from '../../services/aiService';
import authService from '../../services/auth/authService';
import MyGamesScreen from './MyGamesScreen';
import { Colors } from '../../constants/colors';
import Spinner from '../../components/ui/Spinner';

interface CreateGameScreenProps {
  onBack: () => void;
  onGameCreated?: (gameData: any) => void;
  editingGame?: GameData | null; // Optional game data for editing
}

interface GameData {
  id: string;
  title: string;
  questionCount?: number;
  questionsCount?: number;
  isReady?: boolean;
  maxQuestions?: number;
  remainingQuestions?: number;
  createdAt?: string;
  language?: string;
  nPlayer?: number;
}

interface QuestionSet {
  question: string;
  options: string[];
  correctAnswer: number;
}

const CreateGameScreen: React.FC<CreateGameScreenProps> = ({ onBack, onGameCreated, editingGame }) => {
  const [prompt, setPrompt] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedQuestions, setGeneratedQuestions] = useState<QuestionSet[]>([]);
  const [selectedQuestions, setSelectedQuestions] = useState<number[]>([]);
  const [gameTitle, setGameTitle] = useState(editingGame?.title || '');
  const [totalSelectedQuestions, setTotalSelectedQuestions] = useState(0);
  const [showMyGames, setShowMyGames] = useState(false);
  const [isCreatingGame, setIsCreatingGame] = useState(false);
  const [editingGameData, setEditingGameData] = useState<GameData | null>(editingGame || null);
  const [allQuestions, setAllQuestions] = useState<QuestionSet[]>([]);
  const [currentBatch, setCurrentBatch] = useState(1);
  const scrollViewRef = useRef<ScrollView>(null);
  const promptInputRef = useRef<TextInput>(null);

  // Handle navigation from MyGamesScreen EDIT button
  const handleNavigateToAddQuestions = (gameData: GameData) => {
    setEditingGameData(gameData);
    setGameTitle(gameData.title);
    setShowMyGames(false);
    
    // Provide user feedback about editing mode
    Alert.alert(
      'Edit Game',
      `Now editing "${gameData.title}". Generate questions to add to this existing game.`,
      [{ text: 'OK' }]
    );
  };

const handleGenerateQuestions = async () => {
    if (!prompt.trim()) {
      Alert.alert('Invalid Input', 'Please enter a topic or prompt to generate questions.');
      return;
    }

    setIsGenerating(true);
    
    try {
      console.log('Generating questions for prompt:', prompt, 'Batch:', currentBatch);
      
      // Call AI service to generate questions
      const result = await aiService.generateQuestions(prompt, {
        count: 5,
        difficulty: 'medium',
        model: 'flan-t5-small', // Use small model for faster response
      });
      
      console.log('AI service response:', result);
      
      // Convert AI response format to our QuestionSet format
      const questionsData = result.data?.questions;
      if (!questionsData) throw new Error('No questions generated by AI service');
      const convertedQuestions: QuestionSet[] = questionsData.map((q: any) => {
        // Extract options A, B, C, D and find correct answer index
        const optionsArray = [q.options.A, q.options.B, q.options.C, q.options.D];
        const correctAnswerIndex = ['A', 'B', 'C', 'D'].indexOf(q.correctAnswer);
        
        return {
          question: q.question,
          options: optionsArray,
          correctAnswer: correctAnswerIndex >= 0 ? correctAnswerIndex : 0,
        };
      });
      
      // Add to accumulated questions
      const updatedAllQuestions = [...allQuestions, ...convertedQuestions];
      setAllQuestions(updatedAllQuestions);
      
      // Set current generated questions for display
      setGeneratedQuestions(convertedQuestions);
      setSelectedQuestions(convertedQuestions.map((_, index) => index)); // Select all questions by default
      
      // Set title only on first batch
      if (currentBatch === 1) {
        setGameTitle(`Quiz: ${prompt}`);
      }
      
      // Increment batch counter
      setCurrentBatch(prev => prev + 1);
      
      const totalQuestions = updatedAllQuestions.length;
      
      if (totalQuestions >= 20) {
        // Reached 20 questions - automatically create game and navigate to My Games
        setTimeout(async () => {
          await handleAutoCreateGameAt20(updatedAllQuestions);
        }, 1000); // Give user time to see the progress
      } else {
        // Scroll down to Create Game button after generating questions
        setTimeout(() => {
          scrollViewRef.current?.scrollToEnd({ animated: true });
        }, 500); // Small delay to ensure UI has updated
      }
      
    } catch (error) {
      console.error('Error generating questions:', error);
      
      let errorMessage = 'Failed to generate questions. Please try again.';
      
      if (error.message?.includes('Cannot connect to AI service')) {
        errorMessage = 'Cannot connect to AI service. Please make sure the AI service is running.';
      } else if (error.message?.includes('API key')) {
        errorMessage = 'AI service requires API key configuration. Please check service setup.';
      } else if (error.message?.includes('timeout')) {
        errorMessage = 'Request timed out. The AI service might be busy. Please try again.';
      }
      
      Alert.alert('Error', errorMessage, [
        { text: 'Try Again', onPress: () => {} },
        { 
          text: 'Use Demo Mode', 
          onPress: () => {
            // Fallback to demo questions
            const demoQuestions: QuestionSet[] = [
              {
                question: `What is the main concept related to "${prompt}"?`,
                options: ['Option A', 'Option B', 'Option C', 'Option D'],
                correctAnswer: 0
              },
              {
                question: `Which of the following best describes "${prompt}"?`,
                options: ['Description A', 'Description B', 'Description C', 'Description D'],
                correctAnswer: 1
              }
            ];
            setGeneratedQuestions(demoQuestions);
            setSelectedQuestions(demoQuestions.map((_, index) => index)); // Select all questions by default
            setGameTitle(`Demo Quiz: ${prompt}`);
          }
        }
      ]);
    } finally {
      setIsGenerating(false);
    }
  };

  const toggleQuestionSelection = (questionIndex: number) => {
    setSelectedQuestions(prev => {
      if (prev.includes(questionIndex)) {
        return prev.filter(index => index !== questionIndex);
      } else {
        return [...prev, questionIndex];
      }
    });
  };

  const handleCreateGame = async () => {
    if (!gameTitle.trim()) {
      Alert.alert('Missing Title', 'Please enter a title for your game.');
      return;
    }

    if (allQuestions.length === 0) {
      Alert.alert('No Questions Available', 'Please generate some questions first.');
      return;
    }

    // Warn if less than 20 questions but allow creation
    if (allQuestions.length < 20) {
      // Less than 20 questions - prompt for more
      setTimeout(() => {
        scrollViewRef.current?.scrollTo({ y: 0, animated: true });
        setTimeout(() => {
          promptInputRef.current?.focus();
        }, 300); // Small delay to ensure scroll completes first
      }, 500); // Small delay to ensure UI has updated
      return;
    }

    // If 20 or more questions, proceed directly
    proceedWithGameCreation();
  };


  const proceedWithGameCreation = async () => {
    setIsCreatingGame(true);
    
    try {
      // Use all accumulated questions (up to 20) instead of just selected from current batch
      const finalQuestions = allQuestions.slice(0, 20);
      
      if (editingGameData) {
        // We're editing an existing game - add questions to it
        console.log('Adding questions to existing game:', editingGameData.id);
        await addQuestionsToExistingGame(editingGameData.id, finalQuestions);
        
        Alert.alert('Success', `Added ${finalQuestions.length} questions to "${editingGameData.title}" successfully!`, [
          { text: 'OK', onPress: onBack }
        ]);
      } else {
        // We're creating a new game with all accumulated questions
        const gameData = {
          title: gameTitle,
          prompt: prompt,
          questions: finalQuestions,
          createdAt: new Date().toISOString(),
        };

        console.log('Creating new game with 20 accumulated questions:', gameData);
        await saveGameWithQuestions(gameData);

        Alert.alert(
          '🎉 Game Created Successfully!', 
          `Your game "${gameData.title}" has been created with ${finalQuestions.length} questions and is ready to play!`,
          [
            { 
              text: 'Go to My Games', 
              onPress: () => {
                // Reset all states
                setPrompt('');
                setGeneratedQuestions([]);
                setSelectedQuestions([]);
                setGameTitle('');
                setAllQuestions([]);
                setCurrentBatch(1);
                
                // Navigate to My Games
                setShowMyGames(true);
              }
            },
            { 
              text: 'Stay Here', 
              onPress: () => {
                // Reset states but stay on creation screen
                setPrompt('');
                setGeneratedQuestions([]);
                setSelectedQuestions([]);
                setGameTitle('');
                setAllQuestions([]);
                setCurrentBatch(1);
              }
            }
          ]
        );
      }
    } catch (error) {
      console.error('Error with game operation:', error);
      
      let errorMessage = editingGameData 
        ? 'Failed to add questions to game. Please try again.'
        : 'Failed to create game. Please try again.';
      let errorTitle = 'Error';
      
      if (error.message?.includes('No token provided') || error.message?.includes('authentication') || error.message?.includes('401') || error.message?.includes('User is not authenticated')) {
        errorTitle = 'Authentication Error';
        errorMessage = error.message?.includes('User is not authenticated') ? 'Please sign in again to continue.' : 'Authentication failed. Please try signing in again.';
      } else if (error.message?.includes('network') || error.message?.includes('fetch')) {
        errorMessage = 'Network error. Please check your connection and try again.';
      } else if (error.message?.includes('Failed to save') || error.message?.includes('Failed to add')) {
        errorMessage = 'Unable to save to server. The backend service may be unavailable.';
      }
      
      Alert.alert(errorTitle, errorMessage, [
        { text: 'OK' },
        { 
          text: 'Save Locally', 
          onPress: () => {
            // For now, just show success message as if saved locally
            Alert.alert(
              'Saved Locally', 
              editingGameData 
                ? 'Your questions have been saved locally! Once authentication is implemented, they will sync to the server.'
                : 'Your game has been saved locally! Once authentication is implemented, it will sync to the server.',
              [{ text: 'OK', onPress: onBack }]
            );
          }
        }
      ]);
    } finally {
      setIsCreatingGame(false);
    }
  };

  const saveGameWithQuestions = async (gameData) => {
    // Get the current user and their access token
    const currentUser = authService.getCurrentUser();
    
    if (!currentUser || !currentUser.accessToken) {
      throw new Error('User is not authenticated. Please sign in first.');
    }
    
    const response = await fetch('http://localhost:8080/api/games', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${currentUser.accessToken}`
      },
      body: JSON.stringify(gameData)
    });
    
    if (!response.ok) {
      let errorMessage = 'Failed to save game and questions';
      
      try {
        const errorData = await response.json();
        if (errorData.message) {
          errorMessage = errorData.message;
        }
      } catch (e) {
        // If we can't parse the error response, use the status text
        errorMessage = response.statusText || `HTTP ${response.status} error`;
      }
      
      throw new Error(errorMessage);
    }
    
    return await response.json();
  };

  const addQuestionsToExistingGame = async (gameId: string, questions: QuestionSet[]) => {
    const currentUser = authService.getCurrentUser();
    
    if (!currentUser || !currentUser.accessToken) {
      throw new Error('User is not authenticated. Please sign in first.');
    }

    console.log(`Adding ${questions.length} questions to game ${gameId}`);
    
    // Convert questions to the format expected by the backend API
    const questionsData = questions.map(q => {
      // Convert options array back to A, B, C, D object format
      const optionsObj = {
        A: q.options[0] || '',
        B: q.options[1] || '',
        C: q.options[2] || '',
        D: q.options[3] || ''
      };
      
      return {
        gameId: gameId,
        question: q.question,
        answer: q.correctAnswer.toString(), // Backend expects string representation of numeric index ("0", "1", "2", "3")
        options: optionsObj, // Backend schema expects options as object, controller will stringify it
        timeLimit: 60, // Default time limit
        qSource: 'ai-generated', // Required field
        qPoints: 10 // Default points
      };
    });

    console.log('Formatted questions data:', questionsData[0]); // Log first question for debugging

    // Add questions one by one using the correct API endpoint
    for (const [index, questionData] of questionsData.entries()) {
      console.log(`Adding question ${index + 1}/${questionsData.length}:`, questionData.question);
      
      const response = await fetch('http://localhost:8080/api/v1/question/create', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${currentUser.accessToken}`
        },
        body: JSON.stringify(questionData)
      });
      
      console.log(`Question ${index + 1} response status:`, response.status);
      
      if (!response.ok) {
        let errorMessage = `Failed to add question ${index + 1} to game`;
        
        try {
          const errorData = await response.json();
          console.log(`Question ${index + 1} error response:`, errorData);
          
          if (errorData.message) {
            errorMessage = errorData.message;
          } else if (errorData.error) {
            errorMessage = errorData.error;
          }
        } catch (e) {
          console.log(`Could not parse error response for question ${index + 1}`);
          errorMessage = response.statusText || `HTTP ${response.status} error`;
        }
        
        throw new Error(errorMessage);
      }
      
      const result = await response.json();
      console.log(`Question ${index + 1} added successfully:`, result);
    }
    
    console.log(`Successfully added ${questions.length} questions to game ${gameId}`);
    return { success: true, questionsAdded: questions.length };
  };

  const handleAutoCreateGameAt20 = async (questionsToUse?: QuestionSet[]) => {
    if (!gameTitle.trim()) {
      // Set a default title if none exists
      setGameTitle(`Quiz: ${prompt}`);
    }
    
    setIsCreatingGame(true);

    try {
      // Use exactly 20 questions - either passed in or from state
      const finalQuestions = (questionsToUse || allQuestions).slice(0, 20);
      
      const gameData = {
        title: gameTitle || `Quiz: ${prompt}`,
        prompt: prompt,
        questions: finalQuestions,
        createdAt: new Date().toISOString(),
      };

      console.log('Auto-creating game at 20 questions:', gameData);
      await saveGameWithQuestions(gameData);

      Alert.alert(
        '🎉 Game Auto-Created!', 
        `Congratulations! You've reached 20 questions and your game "${gameData.title}" has been automatically created!\n\nNavigating to My Games...`,
        [
          { 
            text: 'View My Games', 
            onPress: () => {
              // Reset all states
              setPrompt('');
              setGeneratedQuestions([]);
              setSelectedQuestions([]);
              setGameTitle('');
              setAllQuestions([]);
              setCurrentBatch(1);
              
              // Navigate to My Games
              setShowMyGames(true);
            }
          }
        ]
      );
    } catch (error) {
      console.error('Error auto-creating game at 20:', error);
      
      Alert.alert(
        'Auto-Creation Failed',
        'There was an error automatically creating your game. You can still create it manually from the Create Game button.',
        [{ text: 'OK' }]
      );
    } finally {
      setIsCreatingGame(false);
    }
  };

  const handleAutoCreateGame = async (finalQuestions: QuestionSet[]) => {
    setIsCreatingGame(true);
    
    try {
      const gameData = {
        title: gameTitle || `Quiz: ${prompt}`,
        prompt: prompt,
        questions: finalQuestions,
        createdAt: new Date().toISOString(),
      };

      console.log('Auto-creating game with 20 questions:', gameData);
      await saveGameWithQuestions(gameData);

      Alert.alert(
        '🎉 Game Created Successfully!', 
        `Your game "${gameData.title}" has been created with 20 questions and is ready to play!`,
        [
          { 
            text: 'Go to My Games', 
            onPress: () => {
              // Reset all states
              setPrompt('');
              setGeneratedQuestions([]);
              setSelectedQuestions([]);
              setGameTitle('');
              setAllQuestions([]);
              setCurrentBatch(1);
              
              // Navigate to My Games
              setShowMyGames(true);
            }
          }
        ]
      );
    } catch (error) {
      console.error('Error auto-creating game:', error);
      
      Alert.alert(
        'Game Creation Failed',
        'There was an error creating your game. Would you like to try again or go to My Games to create it manually?',
        [
          { text: 'Try Again', onPress: () => handleAutoCreateGame(finalQuestions) },
          { 
            text: 'Go to My Games', 
            onPress: () => {
              setShowMyGames(true);
            }
          }
        ]
      );
    } finally {
      setIsCreatingGame(false);
    }
  };

  const handleClearAll = () => {
    Alert.alert(
      'Clear All',
      'Are you sure you want to clear all data?',
      [
        { text: 'Cancel', style: 'cancel' },
        { 
          text: 'Clear', 
          style: 'destructive',
          onPress: () => {
            setPrompt('');
            setGeneratedQuestions([]);
            setSelectedQuestions([]);
            setGameTitle('');
            setAllQuestions([]);
            setCurrentBatch(1);
          }
        }
      ]
    );
  };

  // Show My Games screen if requested
  if (showMyGames) {
    return (
      <MyGamesScreen 
        onBack={() => setShowMyGames(false)} 
        onNavigateToAddQuestions={handleNavigateToAddQuestions}
      />
    );
  }

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar style="dark" />
      
      {/* Header */}
      <View style={styles.header}>
        <TouchableOpacity style={styles.backButton} onPress={onBack}>
          <Text style={styles.backButtonText}>← Back</Text>
        </TouchableOpacity>
        
        <View style={styles.headerCenter}>
          <Image 
            source={require('../../../assets/mindoora.png')} 
            style={styles.headerLogo}
            resizeMode="contain"
          />
        </View>
        
        <View style={styles.headerRight} />
      </View>

      <ScrollView 
        ref={scrollViewRef}
        style={styles.content} 
        showsVerticalScrollIndicator={false}
      >
        {/* Title Section */}
        <View style={styles.titleSection}>
          <Text style={styles.gameIcon}>
            <Image 
              source={require('../../../assets/mindoora-short.png')} 
              style={styles.headerLogo}
              resizeMode="contain"
            />
          </Text>
          <Text style={styles.title}>Create Game</Text>
          <Text style={styles.subtitle}>Enter a topic to generate quiz questions</Text>
          
          {/* My Games Button */}
          <TouchableOpacity 
            style={styles.myGamesButton} 
            onPress={() => setShowMyGames(true)}
            activeOpacity={0.7}
          >
            <Text style={styles.myGamesButtonText}>📚 My Games</Text>
          </TouchableOpacity>
          
          {/* Editing Game Indicator */}
          {editingGameData && (
            <View style={styles.editingGameIndicator}>
              <Text style={styles.editingGameLabel}>Currently Editing:</Text>
              <Text style={styles.editingGameName}>"{editingGameData.title}"</Text>
              <Text style={styles.editingGameHint}>Generate questions to add to this game</Text>
            </View>
          )}
        </View>

        {/* Prompt Input Section */}
        <View style={styles.inputSection}>
          <Text style={styles.inputLabel}>Enter Topic or Prompt</Text>
          
          <TextInput
            ref={promptInputRef}
            style={styles.promptInput}
            value={prompt}
            onChangeText={setPrompt}
            placeholder="e.g., JavaScript programming, World History, Biology..."
            placeholderTextColor="#999"
            multiline
            numberOfLines={4}
            textAlignVertical="top"
            editable={!isGenerating}
          />
          
          <Text style={styles.inputHint}>
            Be specific for better questions. You can mention difficulty level or focus areas.
          </Text>
        </View>

        {/* Generate Button */}
        <View style={styles.buttonSection}>
          <TouchableOpacity
            style={[
              styles.generateButton,
              prompt.trim() ? styles.generateButtonEnabled : styles.generateButtonDisabled,
              isGenerating && styles.generateButtonLoading
            ]}
            onPress={handleGenerateQuestions}
            disabled={!prompt.trim() || isGenerating}
          >
            {isGenerating ? (
              <View style={styles.loadingContainer}>
                <ActivityIndicator size="small" color="#fff" />
                <Text style={styles.generateButtonText}>Generating Questions...</Text>
              </View>
            ) : (
              <Text style={[
                styles.generateButtonText,
                prompt.trim() ? styles.generateButtonTextEnabled : styles.generateButtonTextDisabled
              ]}>
                Generate 5 Questions
              </Text>
            )}
          </TouchableOpacity>
        </View>

<Spinner visible={isCreatingGame} />
        {/* Generated Questions Section */}
        {generatedQuestions.length > 0 && (
          <View style={styles.questionsSection}>
            <Text style={styles.sectionTitle}>Generated Questions</Text>
            
            {/* Game Title Input */}
            <View style={styles.gameTitleSection}>
              <Text style={styles.inputLabel}>Game Title</Text>
              <TextInput
                style={styles.titleInput}
                value={gameTitle}
                onChangeText={setGameTitle}
                placeholder="Enter game title..."
                placeholderTextColor="#999"
              />
            </View>

            {/* Question Selection Instructions */}
            <View style={styles.selectionInstructions}>
              <Text style={styles.instructionText}>
                📋 Latest batch: {generatedQuestions.length} questions (Batch {currentBatch - 1})
              </Text>
              <Text style={styles.selectionCount}>
                Total accumulated: {allQuestions.length} questions | Target: 20 questions
              </Text>
              
              {/* Progress Bar */}
              <View style={styles.progressContainer}>
                <View style={styles.progressBar}>
                  <View 
                    style={[
                      styles.progressFill, 
                      { 
                        width: `${Math.min((allQuestions.length / 20) * 100, 100)}%`,
                        backgroundColor: allQuestions.length >= 20 ? '#4CAF50' : '#2196F3'
                      }
                    ]} 
                  />
                </View>
                <Text style={styles.progressText}>
                  {allQuestions.length}/20 questions
                </Text>
              </View>
              
              {allQuestions.length >= 20 && (
                <Text style={styles.readyMessage}>
                  🎉 Perfect! You've reached 20 questions - the ideal game size!
                </Text>
              )}
              
              {allQuestions.length >= 15 && allQuestions.length < 20 && (
                <Text style={styles.almostReadyMessage}>
                  ⚡ Almost there! Generate {20 - allQuestions.length} more for the ideal 20-question game.
                </Text>
              )}
              
              {allQuestions.length >= 5 && allQuestions.length < 15 && (
                <Text style={styles.continueMessage}>
                  🚀 Good start! You can create a game now or continue to 20 questions for the best experience.
                </Text>
              )}
              
              {allQuestions.length > 0 && allQuestions.length < 5 && (
                <Text style={styles.continueMessage}>
                  📝 You can create a game with any number of questions.
                </Text>
              )}
            </View>

            {/* Questions Preview */}
            {generatedQuestions.map((question, index) => {
              const isSelected = selectedQuestions.includes(index);
              return (
                <TouchableOpacity
                  key={index}
                  style={[
                    styles.questionCard,
                    isSelected ? styles.questionCardSelected : styles.questionCardUnselected
                  ]}
                  onPress={() => toggleQuestionSelection(index)}
                  activeOpacity={0.7}
                >
                  <View style={styles.questionHeader}>
                    <Text style={[
                      styles.questionNumber,
                      isSelected && styles.questionNumberSelected
                    ]}>
                      Question {index + 1}
                    </Text>
                    <View style={[
                      styles.selectionIndicator,
                      isSelected ? styles.selectionIndicatorSelected : styles.selectionIndicatorUnselected
                    ]}>
                      {isSelected && <Text style={styles.selectionCheckmark}>✓</Text>}
                    </View>
                  </View>
                  
                  <Text style={[
                    styles.questionText,
                    isSelected && styles.questionTextSelected
                  ]}>
                    {question.question}
                  </Text>
                  
                  <View style={styles.optionsContainer}>
                    {question.options.map((option, optionIndex) => (
                      <View
                        key={optionIndex}
                        style={[
                          styles.optionItem,
                          optionIndex === question.correctAnswer && styles.correctOption,
                          isSelected && optionIndex === question.correctAnswer && styles.correctOptionSelected
                        ]}
                      >
                        <Text style={[
                          styles.optionText,
                          optionIndex === question.correctAnswer && styles.correctOptionText,
                          isSelected && styles.optionTextSelected,
                          isSelected && optionIndex === question.correctAnswer && styles.correctOptionTextSelected
                        ]}>
                          {String.fromCharCode(65 + optionIndex)}. {option}
                        </Text>
                        {optionIndex === question.correctAnswer && (
                          <Text style={[
                            styles.correctIndicator,
                            isSelected && styles.correctIndicatorSelected
                          ]}>✓</Text>
                        )}
                      </View>
                    ))}
                  </View>
                </TouchableOpacity>
              );
            })}

            {/* Action Buttons */}
            <View style={styles.actionButtons}>
              <TouchableOpacity
                style={[
                  styles.createGameButton,
                  (allQuestions.length === 0 || isCreatingGame || isGenerating) && styles.createGameButtonDisabled
                ]}
                onPress={handleCreateGame}
                disabled={allQuestions.length === 0 || isCreatingGame || isGenerating}
              >
                {(isCreatingGame || isGenerating) ? (
                  <View style={styles.loadingContainer}>
                    <ActivityIndicator size="small" color="#fff" />
                    <Text style={styles.createGameButtonText}>
                      {isCreatingGame ? 'Creating Game...' : 'Generating Questions...'}
                    </Text>
                  </View>
                ) : (
                  <Text style={[
                    styles.createGameButtonText,
                    allQuestions.length === 0 && styles.createGameButtonTextDisabled
                  ]}>
                    {allQuestions.length > 0 
                      ? `Create Game (${allQuestions.length} questions)`
                      : `Generate questions first`
                    }
                  </Text>
                )}
              </TouchableOpacity>

              <TouchableOpacity
                style={styles.clearButton}
                onPress={handleClearAll}
              >
                <Text style={styles.clearButtonText}>Clear All</Text>
              </TouchableOpacity>
            </View>
          </View>
        )}

        {/* Info Section */}
        <View style={styles.infoSection}>
          <View style={styles.infoCard}>
            <Text style={styles.infoTitle}>How it Works</Text>
            <Text style={styles.infoText}>
              1. Enter a topic or detailed prompt{'\n'}
              2. Tap "Generate 5 Questions" multiple times{'\n'}
              3. Continue until you reach 20 questions{'\n'}
              4. Give your game a title{'\n'}
              5. Tap "Create Game" when you have 20 questions
            </Text>
          </View>
        </View>
      </ScrollView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 20,
    paddingVertical: 15,
    backgroundColor: '#fff',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 3,
    elevation: 3,
  },
  backButton: {
    flex: 1,
  },
  backButtonText: {
    fontSize: 16,
    color: '#4CAF50',
    fontWeight: '600',
  },
  headerCenter: {
    flex: 1,
    alignItems: 'center',
  },
  headerLogo: {
    width: 120,
    height: 40,
  },
  headerRight: {
    flex: 1,
  },
  content: {
    flex: 1,
  },
  titleSection: {
    alignItems: 'center',
    paddingHorizontal: 20,
    marginTop: 20,
    marginBottom: 30,
    backgroundColor: '#fff',
    paddingVertical: 30,
    marginHorizontal: 20,
    borderRadius: 15,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 5,
    elevation: 3,
  },
  gameIcon: {
    fontSize: 60,
    marginBottom: 15,
  },
  title: {
    fontSize: 28,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 8,
  },
  subtitle: {
    fontSize: 16,
    color: '#666',
    textAlign: 'center',
  },
  inputSection: {
    paddingHorizontal: 20,
    marginBottom: 25,
  },
  inputLabel: {
    fontSize: 18,
    fontWeight: '600',
    color: '#333',
    marginBottom: 10,
  },
  promptInput: {
    backgroundColor: '#fff',
    borderWidth: 2,
    borderColor: '#ddd',
    borderRadius: 12,
    padding: 15,
    fontSize: 16,
    color: '#333',
    minHeight: 100,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 1,
    },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
  },
  inputHint: {
    fontSize: 14,
    color: '#888',
    marginTop: 8,
    fontStyle: 'italic',
  },
  buttonSection: {
    paddingHorizontal: 20,
    marginBottom: 25,
  },
  generateButton: {
    paddingVertical: 15,
    borderRadius: 25,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 5,
    elevation: 3,
  },
  generateButtonEnabled: {
    backgroundColor: '#4CAF50',
  },
  generateButtonDisabled: {
    backgroundColor: '#ccc',
  },
  generateButtonLoading: {
    opacity: 0.8,
  },
  loadingContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
  },
  generateButtonText: {
    textAlign: 'center',
    fontSize: 18,
    fontWeight: 'bold',
    marginLeft: 8,
  },
  generateButtonTextEnabled: {
    color: '#fff',
  },
  generateButtonTextDisabled: {
    color: '#999',
  },
  questionsSection: {
    paddingHorizontal: 20,
    marginBottom: 25,
  },
  sectionTitle: {
    fontSize: 22,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 20,
    textAlign: 'center',
  },
  gameTitleSection: {
    marginBottom: 20,
  },
  titleInput: {
    backgroundColor: '#fff',
    borderWidth: 2,
    borderColor: '#ddd',
    borderRadius: 12,
    padding: 15,
    fontSize: 16,
    color: '#333',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 1,
    },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
  },
  questionCard: {
    backgroundColor: '#fff',
    padding: 20,
    borderRadius: 15,
    marginBottom: 15,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 3,
    elevation: 3,
  },
  questionNumber: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#4CAF50',
    marginBottom: 8,
  },
  questionText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333',
    marginBottom: 15,
    lineHeight: 22,
  },
  optionsContainer: {
    gap: 8,
  },
  optionItem: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    padding: 12,
    backgroundColor: '#f8f9fa',
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#e9ecef',
  },
  correctOption: {
    backgroundColor: '#e8f5e8',
    borderColor: '#4CAF50',
  },
  optionText: {
    fontSize: 14,
    color: '#555',
    flex: 1,
  },
  correctOptionText: {
    color: '#2e7d32',
    fontWeight: '500',
  },
  correctIndicator: {
    fontSize: 16,
    color: '#4CAF50',
    fontWeight: 'bold',
  },
  actionButtons: {
    marginTop: 20,
    gap: 15,
  },
  createGameButton: {
    backgroundColor: '#4CAF50',
    paddingVertical: 15,
    borderRadius: 25,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 5,
    elevation: 3,
  },
  createGameButtonText: {
    textAlign: 'center',
    fontSize: 18,
    fontWeight: 'bold',
    color: '#fff',
  },
  clearButton: {
    paddingVertical: 12,
    borderRadius: 20,
    backgroundColor: 'transparent',
    borderWidth: 1,
    borderColor: '#ddd',
  },
  clearButtonText: {
    textAlign: 'center',
    fontSize: 16,
    color: '#666',
    fontWeight: '500',
  },
  infoSection: {
    paddingHorizontal: 20,
    marginBottom: 30,
  },
  infoCard: {
    backgroundColor: '#fff',
    padding: 20,
    borderRadius: 15,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 3,
    elevation: 3,
  },
  infoTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 10,
  },
  infoText: {
    fontSize: 14,
    color: '#666',
    lineHeight: 20,
  },
  
  // Selection styles
  selectionInstructions: {
    backgroundColor: Colors.primaryLight,
    padding: 15,
    borderRadius: 12,
    marginBottom: 20,
    borderWidth: 1,
    borderColor: Colors.primary,
  },
  instructionText: {
    fontSize: 16,
    color: Colors.primary,
    fontWeight: '600',
    textAlign: 'center',
    marginBottom: 8,
  },
  selectionCount: {
    fontSize: 14,
    color: Colors.primary,
    textAlign: 'center',
    fontWeight: '500',
  },
  
  // Question card selection styles
  questionCardSelected: {
    backgroundColor: Colors.primary,
    borderWidth: 3,
    borderColor: Colors.primaryDark,
  },
  questionCardUnselected: {
    opacity: 0.7,
    borderWidth: 2,
    borderColor: '#ddd',
  },
  
  questionHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 8,
  },
  
  questionNumberSelected: {
    color: '#fff',
  },
  
  questionTextSelected: {
    color: '#fff',
  },
  
  selectionIndicator: {
    width: 24,
    height: 24,
    borderRadius: 12,
    justifyContent: 'center',
    alignItems: 'center',
    borderWidth: 2,
  },
  
  selectionIndicatorSelected: {
    backgroundColor: '#fff',
    borderColor: '#fff',
  },
  
  selectionIndicatorUnselected: {
    backgroundColor: 'transparent',
    borderColor: '#ddd',
  },
  
  selectionCheckmark: {
    color: Colors.primary,
    fontSize: 16,
    fontWeight: 'bold',
  },
  
  // Option styles for selected questions
  optionTextSelected: {
    color: '#fff',
  },
  
  correctOptionSelected: {
    backgroundColor: 'rgba(255, 255, 255, 0.2)',
    borderColor: '#fff',
  },
  
  correctOptionTextSelected: {
    color: '#fff',
    fontWeight: 'bold',
  },
  
  correctIndicatorSelected: {
    color: '#fff',
  },
  
  // Create button disabled styles
  createGameButtonDisabled: {
    backgroundColor: '#ccc',
    opacity: 0.6,
  },
  
  createGameButtonTextDisabled: {
    color: '#999',
  },
  
  // Progress bar styles
  progressContainer: {
    marginTop: 12,
    marginBottom: 8,
  },
  
  progressBar: {
    height: 8,
    backgroundColor: '#e0e0e0',
    borderRadius: 4,
    overflow: 'hidden',
    marginBottom: 6,
  },
  
  progressFill: {
    height: '100%',
    borderRadius: 4,
    transition: 'width 0.3s ease',
  },
  
  progressText: {
    fontSize: 12,
    color: Colors.primary,
    textAlign: 'center',
    fontWeight: '600',
  },
  
  // Status message styles
  readyMessage: {
    fontSize: 14,
    color: '#4CAF50',
    textAlign: 'center',
    fontWeight: '600',
    marginTop: 8,
    backgroundColor: 'rgba(76, 175, 80, 0.1)',
    padding: 8,
    borderRadius: 6,
    borderWidth: 1,
    borderColor: '#4CAF50',
  },
  
  almostReadyMessage: {
    fontSize: 14,
    color: '#FF9800',
    textAlign: 'center',
    fontWeight: '600',
    marginTop: 8,
    backgroundColor: 'rgba(255, 152, 0, 0.1)',
    padding: 8,
    borderRadius: 6,
    borderWidth: 1,
    borderColor: '#FF9800',
  },
  
  continueMessage: {
    fontSize: 14,
    color: '#2196F3',
    textAlign: 'center',
    fontWeight: '600',
    marginTop: 8,
    backgroundColor: 'rgba(33, 150, 243, 0.1)',
    padding: 8,
    borderRadius: 6,
    borderWidth: 1,
    borderColor: '#2196F3',
  },
  
  // My Games Button styles
  myGamesButton: {
    backgroundColor: '#2196F3',
    paddingHorizontal: 20,
    paddingVertical: 10,
    borderRadius: 20,
    marginTop: 15,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 3,
    elevation: 3,
  },
  
  myGamesButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
    textAlign: 'center',
  },
  
  // Editing Game Indicator styles
  editingGameIndicator: {
    backgroundColor: '#FF9800',
    paddingHorizontal: 15,
    paddingVertical: 12,
    borderRadius: 12,
    marginTop: 15,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 3,
    elevation: 3,
  },
  
  editingGameLabel: {
    color: '#fff',
    fontSize: 14,
    fontWeight: '600',
    textAlign: 'center',
    marginBottom: 4,
  },
  
  editingGameName: {
    color: '#fff',
    fontSize: 18,
    fontWeight: 'bold',
    textAlign: 'center',
    marginBottom: 4,
  },
  
  editingGameHint: {
    color: 'rgba(255, 255, 255, 0.9)',
    fontSize: 12,
    fontWeight: '500',
    textAlign: 'center',
    fontStyle: 'italic',
  },
});

export default CreateGameScreen;
